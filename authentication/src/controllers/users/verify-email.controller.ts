import { Request, Response } from "express";
import { asyncHandler } from "../../utils/asyncHandler";
import { User } from "../../models/user";
import { ApiError } from "../../utils/ApiError";
import crypto from "crypto";
import { ApiResponse } from "../../utils/ApiResponse";

export const verifyEmail = asyncHandler(async (req: Request, res: Response) => {
    const { verificationToken } = req.params;

    if (!verificationToken) {
      throw new ApiError(400, "Email verification token is missing");
    }
  
    // generate a hash from the token that we are receiving
    const hashedToken = crypto
      .createHash("sha256")
      .update(verificationToken)
      .digest("hex");
  
    // While registering the user, same time when we are sending the verification mail
    // we have saved a hashed value of the original email verification token in the db
    // We will try to find user with the hashed token generated by received token
    // If we find the user another check is if token expiry of that token is greater than current time if not that means it is expired
    const user = await User.findOne({
      emailVerificationToken: hashedToken,
      emailVerificationExpiry: { $gt: Date.now() },
    });
  
    if (!user) {
      throw new ApiError(489, "Token is invalid or expired");
    }
  
    // If we found the user that means the token is valid
    // Now we can remove the associated email token and expiry date as we no  longer need them
    user.emailVerificationToken = null;
    user.emailVerificationExpiry = null;

    // Turn the email verified flag to `true`
    user.isEmailVerified = true;
    await user.save();
  
    return res
      .status(200)
      .json(new ApiResponse(200, { isEmailVerified: true }, "Email is verified"));
});